{"ast":null,"code":"import { auth, firestore } from 'firebase';\nimport { authConstanst } from './constants';\nimport { getRealtimeUsers } from './user.actions';\nexport const signup = user => async dispatch => {\n  const db = firestore();\n  dispatch({\n    type: `${authConstanst.USER_LOGIN}_REQUEST`\n  });\n  auth().createUserWithEmailAndPassword(user.email, user.password).then(data => {\n    console.log(data);\n    const {\n      currentUser\n    } = auth();\n    const name = `${user.firstName} ${user.lastName}`;\n    const {\n      known,\n      unknown,\n      interests\n    } = user;\n    currentUser.updateProfile({\n      displayName: name\n    }).then(() => {\n      // if you are here means it is updated successfully\n      db.collection('users').doc(data.user.uid).set({\n        firstName: user.firstName,\n        lastName: user.lastName,\n        uid: data.user.uid,\n        createdAt: new Date(),\n        isOnline: true,\n        known: known.split(', '),\n        unknown: unknown.split(', '),\n        interests: interests.split(', ')\n      }).then(() => {\n        // succeful\n        const loggedInUser = {\n          firstName: user.firstName,\n          lastName: user.lastName,\n          uid: data.user.uid,\n          email: user.email,\n          known: known.split(', '),\n          unknown: unknown.split(', '),\n          interests: interests.split(', ')\n        };\n        localStorage.setItem('user', JSON.stringify(loggedInUser));\n        console.log('User logged in successfully...!');\n        dispatch({\n          type: `${authConstanst.USER_LOGIN}_SUCCESS`,\n          payload: {\n            user: loggedInUser\n          }\n        });\n      }).catch(error => {\n        console.log(error);\n        dispatch({\n          type: `${authConstanst.USER_LOGIN}_FAILURE`,\n          payload: {\n            error\n          }\n        });\n      });\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const signin = user => async dispatch => {\n  dispatch({\n    type: `${authConstanst.USER_LOGIN}_REQUEST`\n  });\n  auth().signInWithEmailAndPassword(user.email, user.password).then(async data => {\n    console.log({\n      data\n    });\n    const db = firestore();\n    const currUser = await (await db.collection('users').doc(data.user.uid).get()).data();\n    console.log({\n      currUser\n    });\n    db.collection('users').doc(data.user.uid).update({\n      isOnline: true\n    }).then(() => {\n      const name = data.user.displayName.split(' ');\n      const firstName = name[0];\n      const lastName = name[1];\n      const loggedInUser = {\n        firstName,\n        lastName,\n        uid: data.user.uid,\n        email: data.user.email,\n        interests: currUser.interests,\n        known: currUser.known,\n        unknown: currUser.unknown\n      };\n      localStorage.setItem('user', JSON.stringify(loggedInUser));\n      dispatch({\n        type: `${authConstanst.USER_LOGIN}_SUCCESS`,\n        payload: {\n          user: loggedInUser\n        }\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }).catch(error => {\n    console.log(error);\n    dispatch({\n      type: `${authConstanst.USER_LOGIN}_FAILURE`,\n      payload: {\n        error\n      }\n    });\n  });\n};\nexport const isLoggedInUser = () => async dispatch => {\n  const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\n\n  if (user) {\n    dispatch({\n      type: `${authConstanst.USER_LOGIN}_SUCCESS`,\n      payload: {\n        user\n      }\n    });\n  } else {\n    dispatch({\n      type: `${authConstanst.USER_LOGIN}_FAILURE`,\n      payload: {\n        error: 'Login again please'\n      }\n    });\n  }\n};\nexport const logout = uid => async dispatch => {\n  dispatch({\n    type: `${authConstanst.USER_LOGOUT}_REQUEST`\n  }); // Now lets logout user\n\n  const db = firestore();\n  db.collection('users').doc(uid).update({\n    isOnline: false\n  }).then(() => {\n    auth().signOut().then(() => {\n      // successfully\n      localStorage.clear();\n      dispatch({\n        type: `${authConstanst.USER_LOGOUT}_SUCCESS`\n      });\n    }).catch(error => {\n      console.log(error);\n      dispatch({\n        type: `${authConstanst.USER_LOGOUT}_FAILURE`,\n        payload: {\n          error\n        }\n      });\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n};","map":{"version":3,"sources":["C:/Users/AD/Documents/GitHub/Language_Bridge/src/actions/auth.actions.js"],"names":["auth","firestore","authConstanst","getRealtimeUsers","signup","user","dispatch","db","type","USER_LOGIN","createUserWithEmailAndPassword","email","password","then","data","console","log","currentUser","name","firstName","lastName","known","unknown","interests","updateProfile","displayName","collection","doc","uid","set","createdAt","Date","isOnline","split","loggedInUser","localStorage","setItem","JSON","stringify","payload","catch","error","signin","signInWithEmailAndPassword","currUser","get","update","isLoggedInUser","getItem","parse","logout","USER_LOGOUT","signOut","clear"],"mappings":"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","sourcesContent":["import { auth, firestore } from 'firebase';\r\nimport { authConstanst } from './constants';\r\nimport { getRealtimeUsers } from './user.actions';\r\n\r\nexport const signup = (user) => async (dispatch) => {\r\n  const db = firestore();\r\n\r\n  dispatch({ type: `${authConstanst.USER_LOGIN}_REQUEST` });\r\n\r\n  auth()\r\n    .createUserWithEmailAndPassword(user.email, user.password)\r\n    .then((data) => {\r\n      console.log(data);\r\n      const { currentUser } = auth();\r\n      const name = `${user.firstName} ${user.lastName}`;\r\n\r\n      const { known, unknown, interests } = user;\r\n      currentUser.updateProfile({\r\n        displayName: name,\r\n      })\r\n        .then(() => {\r\n          // if you are here means it is updated successfully\r\n          db.collection('users')\r\n            .doc(data.user.uid)\r\n            .set({\r\n              firstName: user.firstName,\r\n              lastName: user.lastName,\r\n              uid: data.user.uid,\r\n              createdAt: new Date(),\r\n              isOnline: true,\r\n              known: known.split(', '),\r\n              unknown: unknown.split(', '),\r\n              interests: interests.split(', '),\r\n            })\r\n            .then(() => {\r\n              // succeful\r\n              const loggedInUser = {\r\n                firstName: user.firstName,\r\n                lastName: user.lastName,\r\n                uid: data.user.uid,\r\n                email: user.email,\r\n                known: known.split(', '),\r\n                unknown: unknown.split(', '),\r\n                interests: interests.split(', '),\r\n              };\r\n              localStorage.setItem('user', JSON.stringify(loggedInUser));\r\n              console.log('User logged in successfully...!');\r\n              dispatch({\r\n                type: `${authConstanst.USER_LOGIN}_SUCCESS`,\r\n                payload: { user: loggedInUser },\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              console.log(error);\r\n              dispatch({\r\n                type: `${authConstanst.USER_LOGIN}_FAILURE`,\r\n                payload: { error },\r\n              });\r\n            });\r\n        });\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n};\r\n\r\nexport const signin = (user) => async (dispatch) => {\r\n  dispatch({ type: `${authConstanst.USER_LOGIN}_REQUEST` });\r\n  auth()\r\n    .signInWithEmailAndPassword(user.email, user.password)\r\n    .then(async (data) => {\r\n      console.log({ data });\r\n\r\n      const db = firestore();\r\n\r\n      const currUser = await (await db.collection('users').doc(data.user.uid).get()).data();\r\n      console.log({ currUser });\r\n\r\n      db.collection('users')\r\n        .doc(data.user.uid)\r\n        .update({\r\n          isOnline: true,\r\n        })\r\n        .then(() => {\r\n          const name = data.user.displayName.split(' ');\r\n          const firstName = name[0];\r\n          const lastName = name[1];\r\n\r\n          const loggedInUser = {\r\n            firstName,\r\n            lastName,\r\n            uid: data.user.uid,\r\n            email: data.user.email,\r\n            interests: currUser.interests,\r\n            known: currUser.known,\r\n            unknown: currUser.unknown,\r\n          };\r\n\r\n          localStorage.setItem('user', JSON.stringify(loggedInUser));\r\n\r\n          dispatch({\r\n            type: `${authConstanst.USER_LOGIN}_SUCCESS`,\r\n            payload: { user: loggedInUser },\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n      dispatch({\r\n        type: `${authConstanst.USER_LOGIN}_FAILURE`,\r\n        payload: { error },\r\n      });\r\n    });\r\n};\r\n\r\nexport const isLoggedInUser = () => async (dispatch) => {\r\n  const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null;\r\n\r\n  if (user) {\r\n    dispatch({\r\n      type: `${authConstanst.USER_LOGIN}_SUCCESS`,\r\n      payload: { user },\r\n    });\r\n  } else {\r\n    dispatch({\r\n      type: `${authConstanst.USER_LOGIN}_FAILURE`,\r\n      payload: { error: 'Login again please' },\r\n    });\r\n  }\r\n};\r\n\r\nexport const logout = (uid) => async (dispatch) => {\r\n  dispatch({ type: `${authConstanst.USER_LOGOUT}_REQUEST` });\r\n  // Now lets logout user\r\n\r\n  const db = firestore();\r\n  db.collection('users')\r\n    .doc(uid)\r\n    .update({\r\n      isOnline: false,\r\n    })\r\n    .then(() => {\r\n      auth()\r\n        .signOut()\r\n        .then(() => {\r\n          // successfully\r\n          localStorage.clear();\r\n          dispatch({ type: `${authConstanst.USER_LOGOUT}_SUCCESS` });\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          dispatch({ type: `${authConstanst.USER_LOGOUT}_FAILURE`, payload: { error } });\r\n        });\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}