{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jaskaran Gujral\\\\Documents\\\\GitHub\\\\SPM_Project\\\\src\\\\containers\\\\HomePage\\\\index.js\";\n\n/* eslint-disable react/button-has-type */\n\n/* eslint-disable no-shadow */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable react/jsx-filename-extension */\n\n/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport './style.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Layout from '../../components/Layout';\nimport { getRealtimeUsers, updateMessage, getRealtimeConversations } from '../../actions';\n\nconst User = props => {\n  const {\n    user,\n    onClick\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => onClick(user),\n    className: \"displayName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"displayPic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"https://i.pinimg.com/originals/be/ac/96/beac96b8e13d2198fd4bb1d5ef56cdcf.jpg\",\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flex: 1,\n      justifyContent: 'space-between',\n      margin: '0 10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      fontWeight: 500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, user.firstName, ' ', user.lastName), /*#__PURE__*/React.createElement(\"span\", {\n    className: user.isOnline ? 'onlineStatus' : 'onlineStatus off',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst HomePage = () => {\n  const dispatch = useDispatch();\n  const auth = useSelector(state => state.auth);\n  const user = useSelector(state => state.user);\n  const [metUsers, setMetUsers] = useState([]);\n  const [chatStarted, setChatStarted] = useState(false);\n  const [chatUser, setChatUser] = useState('');\n  const [message, setMessage] = useState('');\n  const [userUid, setUserUid] = useState(null);\n  let unsubscribe;\n  useEffect(() => {\n    unsubscribe = dispatch(getRealtimeUsers(auth.uid)).then(unsub => unsub).catch(error => {\n      console.log(error);\n    });\n  }, []); // console.log(user);\n  // componentWillUnmount\n\n  useEffect(() => () => {\n    // cleanup\n    unsubscribe.then(f => f()).catch(error => console.log(error));\n  }, []);\n  useEffect(() => {\n    if (auth && auth.uid) {\n      dispatch(getRealtimeConversations({\n        uid_1: auth.uid\n      }));\n    }\n  }, [auth]);\n  useEffect(() => {\n    if (user && user.users && user.users.length && user.metUsers && user.metUsers.length) {\n      setMetUsers(user.metUsers.map(id => user.users.find(user => user.uid === id) || null).filter(u => u !== null));\n    }\n  }, [user]);\n\n  const initChat = _user => {\n    setChatStarted(true);\n    setChatUser(`${_user.firstName} ${_user.lastName}`);\n    setUserUid(_user.uid);\n    console.log(_user);\n  };\n\n  const submitMessage = () => {\n    const msgObj = {\n      user_uid_1: auth.uid,\n      user_uid_2: userUid,\n      message\n    };\n\n    if (message !== '') {\n      dispatch(updateMessage(msgObj)).then(() => {\n        setMessage('');\n      });\n    } // console.log(msgObj);\n\n  };\n\n  const selectNewContact = () => {\n    if (user && user.users && user.users.length) {\n      const newUsers = user.users.filter(u => !user.metUsers.includes(u.uid));\n      return newUsers.filter(u => {\n        let i = 0;\n        auth.unknown.forEach(lang => {\n          if (u.known.includes(lang)) i += 1;\n        });\n        if (i > 0) return true;\n        return false;\n      }).sort((a, b) => {\n        let ai = 0;\n        let bi = 0;\n        auth.interests.forEach(inter => {\n          if (a.interests.includes(inter)) ai += 1;\n          if (b.interests.includes(inter)) bi += 1;\n        });\n        return bi - ai;\n      })[0];\n    }\n\n    return null;\n  };\n\n  const newConversation = () => {\n    const newuser = selectNewContact();\n    if (!newuser) return;\n    const msgObj = {\n      user_uid_1: auth.uid,\n      user_uid_2: newuser.uid,\n      message: 'Hello!'\n    };\n    dispatch(updateMessage(msgObj)).then(() => {\n      setMessage('');\n    }); // console.log(msgObj);\n  };\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"listOfUsers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: newConversation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, \"New conversation\")), metUsers && metUsers.length > 0 ? metUsers.map(user => /*#__PURE__*/React.createElement(User, {\n    onClick: () => initChat(user),\n    key: user.uid,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  })) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatArea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, chatStarted ? chatUser : ''), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messageSections\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, chatStarted ? user.conversations && user.conversations.filter(c => c.user_uid_1 === (auth && userUid) || c.user_uid_2 === (auth && userUid)).map(con => /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: con.user_uid_1 === auth.uid ? 'right' : 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"messageStyle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 25\n    }\n  }, con.message))) : null), chatStarted ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatControls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    value: message,\n    onChange: e => setMessage(e.target.value),\n    placeholder: \"Write Message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: submitMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }\n  }, \"Send\")) : null)));\n};\n\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/Jaskaran Gujral/Documents/GitHub/SPM_Project/src/containers/HomePage/index.js"],"names":["React","useEffect","useState","useDispatch","useSelector","Layout","getRealtimeUsers","updateMessage","getRealtimeConversations","User","props","user","onClick","display","flex","justifyContent","margin","fontWeight","firstName","lastName","isOnline","HomePage","dispatch","auth","state","metUsers","setMetUsers","chatStarted","setChatStarted","chatUser","setChatUser","message","setMessage","userUid","setUserUid","unsubscribe","uid","then","unsub","catch","error","console","log","f","uid_1","users","length","map","id","find","filter","u","initChat","_user","submitMessage","msgObj","user_uid_1","user_uid_2","selectNewContact","newUsers","includes","i","unknown","forEach","lang","known","sort","a","b","ai","bi","interests","inter","newConversation","newuser","padding","conversations","c","con","textAlign","e","target","value"],"mappings":"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","sourcesContent":["/* eslint-disable react/button-has-type */\n/* eslint-disable no-shadow */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport './style.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Layout from '../../components/Layout';\nimport { getRealtimeUsers, updateMessage, getRealtimeConversations } from '../../actions';\n\nconst User = (props) => {\n  const { user, onClick } = props;\n\n  return (\n    <div onClick={() => onClick(user)} className=\"displayName\">\n      <div className=\"displayPic\">\n        <img src=\"https://i.pinimg.com/originals/be/ac/96/beac96b8e13d2198fd4bb1d5ef56cdcf.jpg\" alt=\"\" />\n      </div>\n      <div style={{\n        display: 'flex', flex: 1, justifyContent: 'space-between', margin: '0 10px',\n      }}\n      >\n        <span style={{ fontWeight: 500 }}>\n          {user.firstName}\n          {' '}\n          {user.lastName}\n        </span>\n        <span className={user.isOnline ? 'onlineStatus' : 'onlineStatus off'} />\n      </div>\n    </div>\n  );\n};\n\nconst HomePage = () => {\n  const dispatch = useDispatch();\n  const auth = useSelector((state) => state.auth);\n  const user = useSelector((state) => state.user);\n  const [metUsers, setMetUsers] = useState([]);\n  const [chatStarted, setChatStarted] = useState(false);\n  const [chatUser, setChatUser] = useState('');\n  const [message, setMessage] = useState('');\n  const [userUid, setUserUid] = useState(null);\n  let unsubscribe;\n\n  useEffect(() => {\n    unsubscribe = dispatch(getRealtimeUsers(auth.uid))\n      .then((unsub) => unsub)\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  // console.log(user);\n\n  // componentWillUnmount\n  useEffect(() => () => {\n    // cleanup\n    unsubscribe.then((f) => f()).catch((error) => console.log(error));\n  }, []);\n\n  useEffect(() => {\n    if (auth && auth.uid) {\n      dispatch(getRealtimeConversations({ uid_1: auth.uid }));\n    }\n  }, [auth]);\n\n  useEffect(() => {\n    if (user && user.users && user.users.length\n      && user.metUsers && user.metUsers.length) {\n      setMetUsers(\n        user.metUsers.map(\n          (id) => user.users.find((user) => user.uid === id) || null,\n        ).filter((u) => u !== null),\n      );\n    }\n  }, [user]);\n\n  const initChat = (_user) => {\n    setChatStarted(true);\n    setChatUser(`${_user.firstName} ${_user.lastName}`);\n    setUserUid(_user.uid);\n\n    console.log(_user);\n  };\n\n  const submitMessage = () => {\n    const msgObj = {\n      user_uid_1: auth.uid,\n      user_uid_2: userUid,\n      message,\n    };\n\n    if (message !== '') {\n      dispatch(updateMessage(msgObj))\n        .then(() => {\n          setMessage('');\n        });\n    }\n\n    // console.log(msgObj);\n  };\n\n  const selectNewContact = () => {\n    if (user && user.users && user.users.length) {\n      const newUsers = user.users.filter((u) => !(user.metUsers.includes(u.uid)));\n      return newUsers.filter((u) => {\n        let i = 0;\n        auth.unknown.forEach((lang) => {\n          if (u.known.includes(lang)) i += 1;\n        });\n        if (i > 0) return true;\n        return false;\n      }).sort((a, b) => {\n        let ai = 0;\n        let bi = 0;\n        auth.interests.forEach((inter) => {\n          if (a.interests.includes(inter)) ai += 1;\n          if (b.interests.includes(inter)) bi += 1;\n        });\n        return bi - ai;\n      })[0];\n    }\n    return null;\n  };\n\n  const newConversation = () => {\n    const newuser = selectNewContact();\n\n    if (!newuser) return;\n\n    const msgObj = {\n      user_uid_1: auth.uid,\n      user_uid_2: newuser.uid,\n      message: 'Hello!',\n    };\n\n    dispatch(updateMessage(msgObj))\n      .then(() => {\n        setMessage('');\n      });\n\n    // console.log(msgObj);\n  };\n\n  return (\n    <Layout>\n      <section className=\"container\">\n\n        <div className=\"listOfUsers\">\n          <div style={{ padding: '10px' }}>\n            <button onClick={newConversation}>New conversation</button>\n          </div>\n\n          {\n            metUsers && metUsers.length > 0\n              ? metUsers.map((user) => (\n                <User\n                  onClick={() => initChat(user)}\n                  key={user.uid}\n                  user={user}\n                />\n              )) : null\n          }\n\n        </div>\n\n        <div className=\"chatArea\">\n\n          <div className=\"chatHeader\">\n            {\n              chatStarted ? chatUser : ''\n            }\n          </div>\n          <div className=\"messageSections\">\n            {\n                  chatStarted\n                    ? user.conversations && user.conversations.filter(\n                      (c) => c.user_uid_1 === (auth && userUid)\n                      || c.user_uid_2 === (auth && userUid),\n                    ).map((con) => (\n                      <div style={{ textAlign: con.user_uid_1 === auth.uid ? 'right' : 'left' }}>\n                        <p className=\"messageStyle\">{con.message}</p>\n                      </div>\n                    ))\n                    : null\n                }\n\n          </div>\n          {\n              chatStarted\n                ? (\n                  <div className=\"chatControls\">\n                    <textarea\n                      value={message}\n                      onChange={(e) => setMessage(e.target.value)}\n                      placeholder=\"Write Message\"\n                    />\n                    <button onClick={submitMessage}>Send</button>\n                  </div>\n                ) : null\n            }\n\n        </div>\n      </section>\n    </Layout>\n  );\n};\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}