{"ast":null,"code":"import { firestore } from 'firebase';\nimport { userConstants } from './constants';\nexport const getRealtimeUsers = uid => async dispatch => {\n  dispatch({\n    type: `${userConstants.GET_REALTIME_USERS}_REQUEST`\n  });\n  const db = firestore();\n  const unsubscribe = db.collection('users') // .where(\"uid\", \"!=\", uid)\n  .onSnapshot(querySnapshot => {\n    const users = [];\n    querySnapshot.forEach(doc => {\n      if (doc.data().uid !== uid) {\n        users.push(doc.data());\n      }\n    }); // console.log(users);\n\n    dispatch({\n      type: `${userConstants.GET_REALTIME_USERS}_SUCCESS`,\n      payload: {\n        users\n      }\n    });\n  });\n  return unsubscribe;\n};\nexport const updateMessage = msgObj => async () => {\n  const db = firestore();\n  db.collection('conversations').add({ ...msgObj,\n    isView: false,\n    createdAt: new Date()\n  }).then(data => {\n    console.log(data); // success\n    // dispatch({\n    //     type: userConstants.GET_REALTIME_MESSAGES,\n    // })\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const getRealtimeConversations = user => async dispatch => {\n  const onSnapshot = querySnapshot => {\n    const conversations = [];\n    querySnapshot.docChanges().forEach(doc => {\n      if (doc.type === 'added') conversations.push(doc.doc.data());\n    });\n    dispatch({\n      type: userConstants.GET_REALTIME_MESSAGES,\n      payload: {\n        conversations\n      }\n    });\n    console.log(conversations);\n  };\n\n  const db = firestore();\n  db.collection('conversations').where('user_uid_1', '==', user.uid_1).orderBy('createdAt', 'asc').onSnapshot(onSnapshot);\n  db.collection('conversations').where('user_uid_2', '==', user.uid_1).orderBy('createdAt', 'asc').onSnapshot(onSnapshot); // user_uid_1 == 'myid' and user_uid_2 = 'yourId' OR user_uid_1 = 'yourId' and user_uid_2 = 'myId'\n};","map":{"version":3,"sources":["C:/Users/Jaskaran Gujral/Documents/GitHub/SPM_Project/src/actions/user.actions.js"],"names":["firestore","userConstants","getRealtimeUsers","uid","dispatch","type","GET_REALTIME_USERS","db","unsubscribe","collection","onSnapshot","querySnapshot","users","forEach","doc","data","push","payload","updateMessage","msgObj","add","isView","createdAt","Date","then","console","log","catch","error","getRealtimeConversations","user","conversations","docChanges","GET_REALTIME_MESSAGES","where","uid_1","orderBy"],"mappings":"AAAA,SAASA,SAAT,QAA0B,UAA1B;AACA,SAASC,aAAT,QAA8B,aAA9B;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,GAAD,IAAS,MAAOC,QAAP,IAAoB;AAC3DA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAG,GAAEJ,aAAa,CAACK,kBAAmB;AAA5C,GAAD,CAAR;AAEA,QAAMC,EAAE,GAAGP,SAAS,EAApB;AACA,QAAMQ,WAAW,GAAGD,EAAE,CAACE,UAAH,CAAc,OAAd,EAClB;AADkB,GAEjBC,UAFiB,CAELC,aAAD,IAAmB;AAC7B,UAAMC,KAAK,GAAG,EAAd;AACAD,IAAAA,aAAa,CAACE,OAAd,CAAuBC,GAAD,IAAS;AAC7B,UAAIA,GAAG,CAACC,IAAJ,GAAWZ,GAAX,KAAmBA,GAAvB,EAA4B;AAC1BS,QAAAA,KAAK,CAACI,IAAN,CAAWF,GAAG,CAACC,IAAJ,EAAX;AACD;AACF,KAJD,EAF6B,CAO7B;;AAEAX,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAG,GAAEJ,aAAa,CAACK,kBAAmB,UADnC;AAEPW,MAAAA,OAAO,EAAE;AAAEL,QAAAA;AAAF;AAFF,KAAD,CAAR;AAID,GAfiB,CAApB;AAiBA,SAAOJ,WAAP;AACD,CAtBM;AAwBP,OAAO,MAAMU,aAAa,GAAIC,MAAD,IAAY,YAAY;AACnD,QAAMZ,EAAE,GAAGP,SAAS,EAApB;AACAO,EAAAA,EAAE,CAACE,UAAH,CAAc,eAAd,EACGW,GADH,CACO,EACH,GAAGD,MADA;AAEHE,IAAAA,MAAM,EAAE,KAFL;AAGHC,IAAAA,SAAS,EAAE,IAAIC,IAAJ;AAHR,GADP,EAMGC,IANH,CAMST,IAAD,IAAU;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ,EADc,CAEd;AACA;AACA;AACA;AACD,GAZH,EAaGY,KAbH,CAaUC,KAAD,IAAW;AAChBH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,GAfH;AAgBD,CAlBM;AAoBP,OAAO,MAAMC,wBAAwB,GAAIC,IAAD,IAAU,MAAO1B,QAAP,IAAoB;AACpE,QAAMM,UAAU,GAAIC,aAAD,IAAmB;AACpC,UAAMoB,aAAa,GAAG,EAAtB;AAEApB,IAAAA,aAAa,CAACqB,UAAd,GAA2BnB,OAA3B,CAAoCC,GAAD,IAAS;AAC1C,UAAIA,GAAG,CAACT,IAAJ,KAAa,OAAjB,EAA0B0B,aAAa,CAACf,IAAd,CAAmBF,GAAG,CAACA,GAAJ,CAAQC,IAAR,EAAnB;AAC3B,KAFD;AAIAX,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,aAAa,CAACgC,qBADb;AAEPhB,MAAAA,OAAO,EAAE;AAAEc,QAAAA;AAAF;AAFF,KAAD,CAAR;AAKAN,IAAAA,OAAO,CAACC,GAAR,CAAYK,aAAZ;AACD,GAbD;;AAeA,QAAMxB,EAAE,GAAGP,SAAS,EAApB;AACAO,EAAAA,EAAE,CAACE,UAAH,CAAc,eAAd,EACGyB,KADH,CACS,YADT,EACuB,IADvB,EAC6BJ,IAAI,CAACK,KADlC,EAEGC,OAFH,CAEW,WAFX,EAEwB,KAFxB,EAGG1B,UAHH,CAGcA,UAHd;AAKAH,EAAAA,EAAE,CAACE,UAAH,CAAc,eAAd,EACGyB,KADH,CACS,YADT,EACuB,IADvB,EAC6BJ,IAAI,CAACK,KADlC,EAEGC,OAFH,CAEW,WAFX,EAEwB,KAFxB,EAGG1B,UAHH,CAGcA,UAHd,EAtBoE,CA0BpE;AACD,CA3BM","sourcesContent":["import { firestore } from 'firebase';\nimport { userConstants } from './constants';\n\nexport const getRealtimeUsers = (uid) => async (dispatch) => {\n  dispatch({ type: `${userConstants.GET_REALTIME_USERS}_REQUEST` });\n\n  const db = firestore();\n  const unsubscribe = db.collection('users')\n    // .where(\"uid\", \"!=\", uid)\n    .onSnapshot((querySnapshot) => {\n      const users = [];\n      querySnapshot.forEach((doc) => {\n        if (doc.data().uid !== uid) {\n          users.push(doc.data());\n        }\n      });\n      // console.log(users);\n\n      dispatch({\n        type: `${userConstants.GET_REALTIME_USERS}_SUCCESS`,\n        payload: { users },\n      });\n    });\n\n  return unsubscribe;\n};\n\nexport const updateMessage = (msgObj) => async () => {\n  const db = firestore();\n  db.collection('conversations')\n    .add({\n      ...msgObj,\n      isView: false,\n      createdAt: new Date(),\n    })\n    .then((data) => {\n      console.log(data);\n      // success\n      // dispatch({\n      //     type: userConstants.GET_REALTIME_MESSAGES,\n      // })\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n\nexport const getRealtimeConversations = (user) => async (dispatch) => {\n  const onSnapshot = (querySnapshot) => {\n    const conversations = [];\n\n    querySnapshot.docChanges().forEach((doc) => {\n      if (doc.type === 'added') conversations.push(doc.doc.data());\n    });\n\n    dispatch({\n      type: userConstants.GET_REALTIME_MESSAGES,\n      payload: { conversations },\n    });\n\n    console.log(conversations);\n  };\n\n  const db = firestore();\n  db.collection('conversations')\n    .where('user_uid_1', '==', user.uid_1)\n    .orderBy('createdAt', 'asc')\n    .onSnapshot(onSnapshot);\n\n  db.collection('conversations')\n    .where('user_uid_2', '==', user.uid_1)\n    .orderBy('createdAt', 'asc')\n    .onSnapshot(onSnapshot);\n  // user_uid_1 == 'myid' and user_uid_2 = 'yourId' OR user_uid_1 = 'yourId' and user_uid_2 = 'myId'\n};\n"]},"metadata":{},"sourceType":"module"}